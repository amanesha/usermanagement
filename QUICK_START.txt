========================================
USER MANAGEMENT SYSTEM - QUICK START
========================================

Your user management system is now COMPLETE and ready to run!

========================================
STEP 1: CREATE MYSQL DATABASE
========================================

Open MySQL Workbench or MySQL Command Line and run:

    CREATE DATABASE IF NOT EXISTS usermanagment CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;


========================================
STEP 2: RUN DJANGO MIGRATIONS
========================================

Open terminal in project root:

    cd backend
    python manage.py migrate
    python manage.py createsuperuser

(Create admin account when prompted)


========================================
STEP 3: CREATE SAMPLE DEPARTMENTS
========================================

Option A - Django Shell:

    python manage.py shell

Then paste:

    from users.models import Department
    departments = [
        {'name': 'Engineering', 'description': 'Software development'},
        {'name': 'Human Resources', 'description': 'HR department'},
        {'name': 'Marketing', 'description': 'Marketing team'},
        {'name': 'Sales', 'description': 'Sales team'},
        {'name': 'Finance', 'description': 'Finance department'},
    ]
    for dept in departments:
        Department.objects.create(**dept)
    exit()


========================================
STEP 4: START BACKEND SERVER
========================================

In backend directory:

    python manage.py runserver

Backend runs on: http://localhost:8000


========================================
STEP 5: START FRONTEND (NEW TERMINAL)
========================================

Keep backend running, open NEW terminal:

    cd front-end
    npm run dev

Frontend runs on: http://localhost:5173


========================================
STEP 6: ACCESS THE APPLICATION
========================================

Open browser: http://localhost:5173

You should see the Dashboard!


========================================
FEATURES AVAILABLE:
========================================

1. DASHBOARD (/)
   - Total users statistics
   - Active/Inactive/On Leave counts
   - Department breakdown

2. USERS LIST (/users)
   - View all users in table
   - Search by name, email, department
   - Quick actions: View, Edit, Delete

3. ADD USER (/users/add)
   - Complete form with all fields
   - Basic info, address, professional details

4. EDIT USER (/users/edit/:id)
   - Update existing user information

5. VIEW PROFILE (/users/:id)
   - Detailed user profile page
   - Contact and professional information


========================================
API ENDPOINTS:
========================================

Users:
  GET    /api/users/              - List all users
  POST   /api/users/              - Create user
  GET    /api/users/{id}/         - Get user details
  PUT    /api/users/{id}/         - Update user
  DELETE /api/users/{id}/         - Delete user
  GET    /api/users/statistics/   - User statistics

Departments:
  GET    /api/departments/        - List departments
  POST   /api/departments/        - Create department
  GET    /api/departments/stats/  - Department stats


========================================
ADMIN PANEL:
========================================

Access: http://localhost:8000/admin/
Login with superuser credentials created in Step 2


========================================
TROUBLESHOOTING:
========================================

Database Error:
  - Ensure MySQL is running
  - Check password in backend/backend/settings.py
  - Create database if not exists

Frontend Not Loading:
  - Check if port 5173 is available
  - Run: npm install in front-end directory

Module Errors:
  - Backend: pip install -r requirements.txt
  - Frontend: npm install


========================================
TECH STACK:
========================================

Backend:
  - Django 5.2.7
  - Django REST Framework
  - MySQL Database
  - CORS Headers

Frontend:
  - React 19
  - Redux Toolkit
  - React Router
  - Tailwind CSS
  - Lucide React Icons
  - Axios


========================================
PROJECT COMPLETE!
========================================

All files are in place:
  - Backend models, views, serializers
  - Frontend components, pages, Redux
  - Routing, API integration
  - Styling with Tailwind

Enjoy your User Management System!
========================================
